c=1 && mkdir -p projects/web/django && cd projects/web/django/ && virtualenv .
((++c)) && source bin/activate
((++c)) && pip3 install django django-environ pymysql selenium coverage
((++c)) && pip3 freeze > requirements.txt
((++c)) && mkdir src && cd src
((++c)) && django-admin startproject boxbusiness .
((++c)) && python3 manage.py migrate
((++c)) && ./manage.py shell -c "from django.contrib.auth.models import User; User.objects.create_superuser('extraodinary_admin', 'extraodinary_admin@example.com', 'go_to_localhost:8000/admin/_and_change_this_password')"
((++c)) && python3 manage.py startapp pages
((++c)) && cd .. && echo -e 'bin/\nlib/python3.8/site-packages' > .gitignore
((++c)) && echo -e '__pycache__/\npyvenv.cfg\ndb.sqlite3' >> .gitignore
((++c)) && echo -e '**/migrations/*\n*.log\n*.pot\n*.pyc\n.env' >> .gitignore
((++c)) && echo -e 'htmlcov\n.coverage' >> .gitignore
((++c)) && cd src && touch .coveragerc
((++c)) && echo '[run]' >> .coveragerc
((++c)) && echo 'omit=' >> .coveragerc
((++c)) && echo ' */lib/*' >> .coveragerc
((++c)) && echo ' */venv/*' >> .coveragerc
((++c)) && echo ' */__init__.py' >> .coveragerc
((++c)) && echo ' */tests.py' >> .coveragerc
((++c)) && echo ' functional_tests.py' >> .coveragerc
((++c)) && echo ' manage.py' >> .coveragerc
((++c)) && cd boxbusiness && touch .env
((++c)) && sed '/^SECRET_KEY/q' settings.py | tail -1 > .env
((++c)) && sed -i -- 's/\ //g' .env
((++c)) && sed -i -- 's/^\(from.*\)$/\1\nimport sys\nimport environ\nenv = environ.Env()\nenviron.Env.read_env()/g' settings.py
((++c)) && sed -i -- "s/^SECRET_KEY\(.*\)$/SECRET_KEY = env('SECRET_KEY')/g" settings.py
((++c)) && sed -i -- "s/'DIRS': \[\],/'DIRS': \[BASE_DIR \/ 'templates'\],/g" settings.py
((++c)) && sed -i -- "s/^\(STATIC_URL = .*\)$/\1\nSTATICFILES_DIRS = (str(BASE_DIR.joinpath('static')),)/g" settings.py
((++c)) && sed -i -- "s/^\(INSTALLED_APPS = .*\)$/\1\n    'pages',/g" settings.py
((++c)) && sed -i -- "s/^\(from.*\)$/\1\nfrom pages\.views import home/g" urls.py
((++c)) && sed -i -- "s/^\(urlpatterns = .*\)$/\1\n    path('', home, name='home'),/g" urls.py
((++c)) && echo "import pymysql" > __init__.py
((++c)) && echo "pymysql.install_as_MySQLdb()" >> __init__.py
((++c)) && echo "" >> __init__.py
((++c)) && echo "'''" >> __init__.py
((++c)) && echo "# settings.py:" >> __init__.py
((++c)) && echo "DATABASES = {" >> __init__.py
((++c)) && echo "    'default': {" >> __init__.py
((++c)) && echo "        'ENGINE': 'django.db.backends.mysql'," >> __init__.py
((++c)) && echo "        'NAME': env('DB_NAME')," >> __init__.py
((++c)) && echo "        'USER': env('DB_USER')," >> __init__.py
((++c)) && echo "        'HOST': env('DB_HOST')," >> __init__.py
((++c)) && echo "        'PORT': env('DB_PORT')," >> __init__.py
((++c)) && echo "        'PASSWORD': env('DB_PASSWORD')" >> __init__.py
((++c)) && echo "    }" >> __init__.py
((++c)) && echo "}" >> __init__.py
((++c)) && echo "if 'test' in sys.argv:" >> __init__.py
((++c)) && echo "    DATABASES['default'] = {" >> __init__.py
((++c)) && echo "        'ENGINE': 'django.db.backends.mysql'," >> __init__.py
((++c)) && echo "        'NAME': env('TEST_DB_NAME')," >> __init__.py
((++c)) && echo "        'USER': env('TEST_DB_USER')," >> __init__.py
((++c)) && echo "        'HOST': env('TEST_DB_HOST')," >> __init__.py
((++c)) && echo "        'PORT': env('TEST_DB_PORT')," >> __init__.py
((++c)) && echo "        'PASSWORD': env('TEST_DB_PASSWORD')," >> __init__.py
((++c)) && echo "        'TEST': {" >> __init__.py
((++c)) && echo "            'MIRROR': 'default'," >> __init__.py
((++c)) && echo "        }," >> __init__.py
((++c)) && echo "    }" >> __init__.py
((++c)) && echo "" >> __init__.py
((++c)) && echo "# terminal:" >> __init__.py
((++c)) && echo "python3 manage.py migrate" >> __init__.py
((++c)) && echo "python3 manage.py inspectdb > models.py" >> __init__.py
((++c)) && echo "'''" >> __init__.py
((++c)) && cd .. && mkdir templates && cd templates
((++c)) && echo '<!DOCTYPE html>' > base.html
((++c)) && echo '<html>' >> base.html
((++c)) && echo '<head>' >> base.html
((++c)) && echo '    <meta charset="UTF-8">' >> base.html
((++c)) && echo '    {% load static %}' >> base.html
((++c)) && echo '    <link rel="stylesheet" href="' >> base.html
((++c)) && echo "{% static 'css/style.css' %}" >> base.html
((++c)) && echo '">' >> base.html
((++c)) && echo '    <link rel="shortcut icon" href="' >> base.html
((++c)) && echo "{% static 'favicon.ico' %}" >> base.html
((++c)) && echo '">' >> base.html
((++c)) && echo '    <title>{% block title %}BoxBusiness{% endblock %}</title>' >> base.html
((++c)) && echo '</head>' >> base.html
((++c)) && echo '<body>' >> base.html
((++c)) && echo '    {% block content %}replace me{% endblock %}' >> base.html
((++c)) && echo "    {% include 'footer.html' %}" >> base.html
((++c)) && echo '</body>' >> base.html
((++c)) && echo '</html>' >> base.html
((++c)) && mkdir pages
((++c)) && echo "{% extends 'base.html' %}{% block content %}<h1>Hello {{ request.user }}</h1>{% endblock %}" > pages/home.html
((++c)) && echo '<footer><a href="/admin">Login</a> and change the password</footer>' > footer.html
((++c)) && cd .. && mkdir -p static/css && cd static
((++c)) && wget https://learndjango.com/static/images/tutorials/favicon/favicon.ico
((++c)) && echo "body {background-color: #48a94d;}" > css/style.css
((++c)) && cd .. && echo "def home(request):" >> pages/views.py
((++c)) && echo "    return render(request, 'pages/home.html', {})" >> pages/views.py
((++c)) && echo -e 'from django.test import SimpleTestCase' > pages/tests.py
((++c)) && echo -e 'from django.urls import reverse, resolve' >> pages/tests.py
((++c)) && echo -e 'from .views import *\n\n' >> pages/tests.py
((++c)) && echo -e 'class TestPages(SimpleTestCase):\n' >> pages/tests.py
((++c)) && echo -e '    def test_home_url_should_be_resolved(self):' >> pages/tests.py
((++c)) && echo -e '        url = reverse('home')' >> pages/tests.py
((++c)) && echo -e '        self.assertEquals(resolve(url).func, home)\n' >> pages/tests.py
((++c)) && echo -e '    def test_home_GET_should_show_home_page(self):' >> pages/tests.py
((++c)) && echo -e '        response = self.client.get(reverse('home'))' >> pages/tests.py
((++c)) && echo -e '        self.assertEquals(response.status_code, 200)' >> pages/tests.py
((++c)) && echo "        self.assertTemplateUsed(response, 'pages/home.html')" >> pages/tests.py
((++c)) && echo -e 'from selenium import webdriver\n' > functional_tests.py
((++c)) && echo -e 'def assert_success(browser):' >> functional_tests.py
((++c)) && echo -e '    try:' >> functional_tests.py
((++c)) && echo -e "        browser.get('http://localhost:8000')" >> functional_tests.py
((++c)) && echo -e "        assert 'BoxBusiness' in browser.title" >> functional_tests.py
((++c)) && echo -e '    finally:' >> functional_tests.py
((++c)) && echo -e '        browser.quit()\n' >> functional_tests.py
((++c)) && echo -e "assert_success(webdriver.Firefox())\n" >> functional_tests.py
((++c)) && echo -e "assert_success(webdriver.Chrome())\n" >> functional_tests.py
((++c)) && echo "'''" >> functional_tests.py
((++c)) && echo "# https://www.obeythetestinggoat.com/book/pre-requisite-installations.html" >> functional_tests.py
((++c)) && echo "# - Download and copy geckodriver to /usr/local/bin" >> functional_tests.py
((++c)) && echo "# - Activate the virtual environment and start the server" >> functional_tests.py
((++c)) && echo "# - In another shell, run the automatic tests (no news is good news!):" >> functional_tests.py
((++c)) && echo "python3 functional_tests.py" >> functional_tests.py
((++c)) && echo "'''" >> functional_tests.py
((++c)) && cd .. && echo "# BoxBusiness" >> README.md
((++c)) && echo "### Django SetUp" >> README.md
((++c)) && echo '- Make sure Python 3 is installed: ```which python3```' >> README.md
((++c)) && echo '- To install the exact same package-versions, try:' >> README.md
((++c)) && echo '```pip3 install -r requirements.txt```' >> README.md
((++c)) && echo "- Read and adapt the Ubuntu [commands](commands.txt)" >> README.md
((++c)) && echo "- Run the first [functional tests](src/functional_tests.py)" >> README.md
((++c)) && echo "### MySQL-Database" >> README.md
((++c)) && echo 'Edit ```.env``` and ```settings.py``` as described in the [comments](src/boxbusiness/__init__.py)' >> README.md
((++c)) && echo "### VCS with GitHub" >> README.md
((++c)) && echo '```console' >> README.md
((++c)) && echo 'git init' >> README.md
((++c)) && echo 'git add .' >> README.md
((++c)) && echo 'git commit -m "Initial commit"' >> README.md
((++c)) && echo 'git branch -M main' >> README.md
((++c)) && echo 'git remote add origin git@github.com:learling/boxbusiness.git' >> README.md
((++c)) && echo 'git push -u origin main' >> README.md
((++c)) && echo '```' >> README.md
((++c)) && echo '### Test-coverage' >> README.md
((++c)) && echo 'Edit ```.coveragerc``` and run:' >> README.md
((++c)) && echo '```console' >> README.md
((++c)) && echo 'coverage run manage.py test -v 2 && coverage report && coverage html' >> README.md
((++c)) && echo '```' >> README.md
((++c)) && echo 'Inspect: ```~/projects/web/django/src/htmlcov/index.html```' >> README.md
((++c)) && history | cut -c 8- | tail -n $c > commands-$(date +"%F-%H-%M-%S").txt && cd src && coverage run manage.py test -v 2 && coverage report && coverage html && ./manage.py runserver